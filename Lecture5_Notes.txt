Notes from Class 10/2 - Lecture 5: Laravel

TODO: Update your digital ocean droplet to fix shellshock.

Framework (laravel) is a sekeleton for a project including folder/file structure and a set of libraries. Libraries live in Vendor folder, and are managed by Composer.

ROUTING lets you have really pretty URLs. http://localhost/books/great-gatsby is a URL, but rather than map it to a folder structure directly, the /books/great-gatsby segment is actually a single command. (This way you don't have to manage a bunch of files in a bunch of different folders.)

ENVIRONMENT MANAGEMENT lets you do stuff like have a local test DB and a live server one, or do error checking differently depending on what environment you're in.

MVC: Model, View, Controller
Controller... fetches data from the model, uses it to build the view
Model... interfaces with database to get requested data ("The data layer")
View... the user-facing page (HTML, CSS)

Routing: go to laravel.com/docs/4.2./routing for more detail (also return to the CodeBright chapter)
Docs is human-designed, API is the dictionary-style documentation. For searching not so much reading. Also at devdocs.io!

COMPOSER is a dependency manager. What's a dependency? Something that's outside your code - jQuery, for example. Dependencies live in the 'Vendor' folder

composer create-project laravel/laravel foobooks --prefer-dist (--prefer-source is the other choice for that last bit)
^ Gonna run this from the command line EVERY TIME you initiate a new Laravel project
(from within the project folder - p3, etc)

Then a bunch of shit happens.

Then do: chmod -R 777 app/storage (it's a permissions thing)

In MAMP, point document root to the new Laravel project (Web Server > Document Root) - go to project directory (probs mamp/htdocs/project name) and then the public folder inside of it. That makes http://localhost = the public folder within your project. This way you run project from domain/subdomain rather than subfolder to make local the same as production.
So, yeah, you have to switch your document root when moving between projects - or edit the virtual hosts file to create subdomains for localhost.

THEN you gotta make it a git repository
And THEN you gotta connect to the remote repo
And THEN you gotta pull it into DO droplet and (because Vendor folder doesn't travel) you need to install composer on the server.
And from then on, you gotta do 3-step deployments:
1. ssh into digital ocean
2. git pull
3. composer update

STUFF INSIDE A LARAVEL PROJECT DIRECTORY
Routes.php:
	Route::get('/', function()
	{
		"Whatever you want to happen when that particular path gets requested."
		(Chances are, this will ultimately be a view that gets returned..)
	});

Workflow-wise, the first thing you'll want to do is figure out the structure of the site - define a route for every function - kinda like an old fashioned sitemap

There's also Route::post('prolly a form page', function()
{
	do a thing when somebody hits 'submit' on your prolly a form 'page'
});

And you can use params when specifying a route (eg /books/{category}), which is great because you don't have to create individual pages for every single damn category.